<?xml version="1.0" encoding="UTF-8"?>
<project name="OS Training Joomla Phing Builder" default="package">
    <!-- version for this build file -->
    <property name="build.version" value="1.3.0"/>
    <echo message="Version ${build.version} for Joomla! extensions"/>

    <taskdef name="setversion" classname="phingext.SetversionTask"/>
    <taskdef name="getversion" classname="phingext.GetVersionTask"/>

    <property name="project.root" value=".."/>
    <property name="dir.packages" value="packages"/>

    <!-- load project properties and allow overriding/setting by individual devs -->
    <property file="build.properties"/>
    <if>
        <available file="${project.root}/build.properties" property="project.build.custom"/>
        <then>
            <property file="${project.root}/build.properties" override="true"/>
        </then>
    </if>

    <property name="app.jtype" value=""/>
    <property name="app.jfolder" value=""/>
    <property name="app.name.short" value=""/>
    <property name="app.version" value=""/>

    <property name="app.source" value="${project.root}/src"/>

    <import file="./submodules.xml"/>

    <if>
        <equals arg1="${app.jfolder}" arg2=""/>
        <then>
            <property name="app.name.long" value="${app.jtype}_${app.name.short}"/>
        </then>
        <else>
            <property name="app.name.long" value="${app.jtype}_${app.jfolder}_${app.name.short}"/>
        </else>
    </if>
    <property name="app.manifest" value="${app.source}/${app.jtype}_${app.name.short}.xml"/>
    <property name="package.file" value="${app.name.long}.zip"/>

    <!-- Accept either long-form or short-form manifest file name -->
    <if>
        <available file="${app.manifest}" property="app.manifest.exists"/>
        <then/>
        <else>
            <property name="app.manifest" value="${app.source}/${app.name.short}.xml" override="true"/>
        </else>
    </if>

    <getversion file="${app.manifest}" property="app.version"/>

    <!-- Create New Release and package -->
    <target name="new-release" description="Update version/creation and create IDed package" depends="release">
        <if>
            <isset property="release.type"/>
            <then>
                <setversion releasetype="${release.type}" file="${app.manifest}" property="app.version"/>
                <phingcall target="update-creation"/>

                <phingcall target="package">
                    <property name="package.file" value="${app.name.long}_${app.version}.zip"/>
                </phingcall>
            </then>
        </if>
    </target>

    <!-- update submodule -->
    <target name="submodules"  description="Submodule Version/Creation updates" depends="select-submodule,release">
        <if>
            <and>
                <isset property="release.type"/>
                <isset property="sub.manifest"/>
            </and>
            <then>
                <property name="sub.version" value=""/>
                <getversion property="sub.version" file="${sub.manifest}"/>
                <setversion file="${sub.manifest}" releasetype="${release.type}" property="${sub.version}"/>
                <phingcall target="update-creation">
                    <property name="app.manifest" value="${sub.manifest}"/>
                </phingcall>
            </then>
        </if>

    </target>

    <!-- Create Current Release and package -->
    <target name="current-release" description="Generate package file for current version">
        <xmlproperty file="${app.manifest}" prefix="manifest" keepRoot="false"/>
        <property name="manifest.version" value="" override="false"/>
        <phingcall target="package">
            <property name="package.file" value="${app.name.long}_${manifest.version}.zip"/>
        </phingcall>
    </target>

    <!-- Create Package without identifying version info -->
    <target name="package" description="Create installation package file">
        <property name="package.path" value="${dir.packages}/${package.file}"/>
        <available file="${package.path}" property="package.path.exists" value="1"/>
        <if>
            <equals arg1="${package.path.exists}" arg2="1"/>
            <then>
                <delete file="${dir.packages}/${package.file}"/>
            </then>
        </if>
        <zip destfile="${dir.packages}/${package.file}" includeemptydirs="true" basedir="${app.source}"/>
    </target>

    <!-- Update creation date in Joomla manifest file -->
    <target name="update-creation" description="Update creation date">
        <tstamp prefix="creation"/>

        <property name="creation.find" value=""><![CDATA[<creationDate>.*</creationDate>]]></property>
        <property name="creation.replace" value=""><![CDATA[<creationDate>${creation.TODAY}</creationDate>]]></property>

        <reflexive file="${app.manifest}">
            <filterchain>
                <replaceregexp>
                    <!--suppress PhingDomInspection -->
                    <regexp pattern="${creation.find}" replace="${creation.replace}"/>
                </replaceregexp>
            </filterchain>
        </reflexive>
        <echo message="Creation Date: ${creation.TODAY}"/>
    </target>

    <target name="release" hidden="true">
        <echo><![CDATA[
            1. Major
            2. Minor
            3. Bugfix
        ]]></echo>
        <input
            propertyName="release.id"
            validArgs="0,1,2,3"
            message="Release Type: "/>

        <if>
            <equals arg1="${release.id}" arg2="1"/>
            <then>
                <property name="release.type" value="major"/>
            </then>
            <elseif>
                <equals arg1="${release.id}" arg2="2"/>
                <then>
                    <property name="release.type" value="minor"/>
                </then>
            </elseif>
            <elseif>
                <equals arg1="${release.id}" arg2="3"/>
                <then>
                    <property name="release.type" value="bugfix"/>
                </then>
            </elseif>
        </if>
    </target>
</project>
